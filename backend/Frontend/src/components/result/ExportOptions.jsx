import React from 'react';
import { 
  DocumentArrowDownIcon, 
  TableCellsIcon, 
  DocumentTextIcon,
  ShareIcon 
} from '@heroicons/react/24/outline';

const ExportOptions = ({ pricingData, configuration }) => {
  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 2,
    }).format(amount);
  };

  const generateCSVData = () => {
    if (!pricingData || pricingData.length === 0) return '';

    const headers = ['Provider', 'Total Cost', 'Service', 'Service Cost'];
    const rows = [];

    pricingData.forEach(provider => {
      if (provider.breakdown && provider.breakdown.length > 0) {
        provider.breakdown.forEach(service => {
          rows.push([
            provider.provider.toUpperCase(),
            provider.totalCost,
            service.service,
            service.cost
          ]);
        });
      } else {
        rows.push([
          provider.provider.toUpperCase(),
          provider.totalCost,
          'Total',
          provider.totalCost
        ]);
      }
    });

    const csvContent = [headers, ...rows]
      .map(row => row.map(cell => `"${cell}"`).join(','))
      .join('\n');

    return csvContent;
  };

  const generateJSONData = () => {
    return JSON.stringify({
      timestamp: new Date().toISOString(),
      configuration,
      pricing: pricingData,
      summary: {
        totalProviders: pricingData?.length || 0,
        lowestCost: pricingData ? Math.min(...pricingData.map(p => p.totalCost)) : 0,
        highestCost: pricingData ? Math.max(...pricingData.map(p => p.totalCost)) : 0,
        averageCost: pricingData ? pricingData.reduce((sum, p) => sum + p.totalCost, 0) / pricingData.length : 0,
      }
    }, null, 2);
  };

  const generateReportText = () => {
    if (!pricingData || pricingData.length === 0) return '';

    const bestProvider = pricingData.reduce((min, provider) => 
      provider.totalCost < min.totalCost ? provider : min
    );

    const report = `
CLOUD COST COMPARISON REPORT
Generated: ${new Date().toLocaleDateString()}

CONFIGURATION SUMMARY:
- Region: ${configuration?.region || 'Not specified'}
- Services: ${configuration ? Object.keys(configuration).filter(k => k !== 'region' && configuration[k]).length : 0}

COST COMPARISON:
${pricingData.map(provider => 
  `- ${provider.provider.toUpperCase()}: ${formatCurrency(provider.totalCost)}/month`
).join('\n')}

RECOMMENDED PROVIDER: ${bestProvider.provider.toUpperCase()}
- Monthly Cost: ${formatCurrency(bestProvider.totalCost)}
- Annual Cost: ${formatCurrency(bestProvider.totalCost * 12)}

POTENTIAL SAVINGS:
- Maximum Savings: ${formatCurrency(Math.max(...pricingData.map(p => p.totalCost)) - bestProvider.totalCost)}/month
- Annual Savings: ${formatCurrency((Math.max(...pricingData.map(p => p.totalCost)) - bestProvider.totalCost) * 12)}

SERVICE BREAKDOWN (${bestProvider.provider.toUpperCase()}):
${bestProvider.breakdown?.map(service => 
  `- ${service.service}: ${formatCurrency(service.cost)}`
).join('\n') || 'No breakdown available'}

This report was generated by Cloud Cost Calculator.
Visit our website for more detailed analysis and recommendations.
    `.trim();

    return report;
  };

  const downloadFile = (content, filename, contentType) => {
    const blob = new Blob([content], { type: contentType });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  const handleExportCSV = () => {
    const csvData = generateCSVData();
    downloadFile(csvData, 'cloud-cost-comparison.csv', 'text/csv');
  };

  const handleExportJSON = () => {
    const jsonData = generateJSONData();
    downloadFile(jsonData, 'cloud-cost-comparison.json', 'application/json');
  };

  const handleExportReport = () => {
    const reportData = generateReportText();
    downloadFile(reportData, 'cloud-cost-report.txt', 'text/plain');
  };

  const handleShareLink = () => {
    // In a real app, you'd generate a shareable link with the configuration
    const shareData = {
      title: 'Cloud Cost Comparison Results',
      text: `Check out my cloud cost comparison results: ${pricingData ? Math.min(...pricingData.map(p => p.totalCost)).toFixed(2) : 0}/month starting cost`,
      url: window.location.href,
    };

    if (navigator.share) {
      navigator.share(shareData).catch(console.error);
    } else {
      // Fallback: copy to clipboard
      const url = window.location.href;
      navigator.clipboard.writeText(url).then(() => {
        alert('Link copied to clipboard!');
      }).catch(() => {
        alert('Unable to copy link. Please copy the URL manually.');
      });
    }
  };

  const exportOptions = [
    {
      name: 'CSV Spreadsheet',
      description: 'Download as CSV for Excel, Google Sheets, etc.',
      icon: TableCellsIcon,
      onClick: handleExportCSV,
      format: '.csv',
      color: 'text-green-600 bg-green-50 hover:bg-green-100',
    },
    {
      name: 'JSON Data',
      description: 'Raw data in JSON format for developers',
      icon: DocumentArrowDownIcon,
      onClick: handleExportJSON,
      format: '.json',
      color: 'text-blue-600 bg-blue-50 hover:bg-blue-100',
    },
    {
      name: 'Text Report',
      description: 'Human-readable summary report',
      icon: DocumentTextIcon,
      onClick: handleExportReport,
      format: '.txt',
      color: 'text-purple-600 bg-purple-50 hover:bg-purple-100',
    },
    {
      name: 'Share Link',
      description: 'Share results with others',
      icon: ShareIcon,
      onClick: handleShareLink,
      format: 'link',
      color: 'text-orange-600 bg-orange-50 hover:bg-orange-100',
    },
  ];

  return (
    <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
      <h2 className="text-lg font-semibold text-gray-900 mb-4">
        Export & Share Results
      </h2>
      
      {(!pricingData || pricingData.length === 0) ? (
        <p className="text-gray-500 text-center py-8">
          Complete your cost calculation to enable export options
        </p>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {exportOptions.map((option, index) => (
            <button
              key={index}
              onClick={option.onClick}
              className={`p-4 rounded-lg border-2 border-transparent transition-all duration-200 text-left ${option.color}`}
            >
              <div className="flex items-start">
                <option.icon className="h-6 w-6 mr-3 mt-1 flex-shrink-0" />
                <div className="flex-grow">
                  <h3 className="font-medium mb-1">{option.name}</h3>
                  <p className="text-sm opacity-80 mb-2">{option.description}</p>
                  <span className="inline-flex items-center px-2 py-1 rounded text-xs font-medium bg-white bg-opacity-50">
                    {option.format}
                  </span>
                </div>
              </div>
            </button>
          ))}
        </div>
      )}

      {pricingData && pricingData.length > 0 && (
        <div className="mt-6 p-4 bg-gray-50 rounded-lg">
          <h3 className="text-sm font-medium text-gray-900 mb-2">Export Tips</h3>
          <ul className="text-sm text-gray-600 space-y-1">
            <li>• CSV files can be opened in Excel, Google Sheets, or any spreadsheet application</li>
            <li>• JSON format is perfect for importing into other tools or applications</li>
            <li>• Text reports are great for sharing via email or documentation</li>
            <li>• Share links let others see your results (configuration is encoded in URL)</li>
          </ul>
        </div>
      )}
    </div>
  );
};

export default ExportOptions;